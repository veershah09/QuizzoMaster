@model List<QuizApplicationMVC.Models.QuizQuestion>

@{
    var duration = ViewBag.Duration; // Get the duration from ViewBag
    ViewData["Title"] = "Take Quiz";
}

<style>

    .card {
        background-color: #333;
        color: #fff;
    }

</style>

<h1 class="display-4 text-white">Take Quiz</h1>

<!-- Timer Display -->
<div id="timer" class="text-white">
    Time remaining: <span id="timeRemaining"></span> minutes
</div>

<div class="container">
    <form id="quizForm" asp-action="Evaluate" method="post">
        @for (var i = 0; i < Model.Count; i++)
        {
            <div class="card mb-3">
                <div class="card-header">
                    <h2>@Model[i].QuestionName</h2>
                </div>
                <div class="card-body">
                    <div class="form-group">
                        <input asp-for="@Model[i].QuestionName" type="hidden" />
                        <input asp-for="@Model[i].Id" type="hidden" />
                        <input asp-for="@Model[i].OptionA" type="hidden" />
                        <input asp-for="@Model[i].OptionB" type="hidden" />
                        <input asp-for="@Model[i].OptionC" type="hidden" />
                        <input asp-for="@Model[i].OptionD" type="hidden" />
                        <input asp-for="@Model[i].CorrectOption" type="hidden" />
                        <input asp-for="@Model[i].Quiz" type="hidden" />

                        <div class="form-check">
                            <input type="radio" asp-for="@Model[i].SelectedOption" value="@Model[i].OptionA" class="form-check-input" id="optionA-@i">
                            <label class="form-check-label" for="optionA-@i">@Model[i].OptionA</label>
                        </div>

                        <div class="form-check">
                            <input type="radio" asp-for="@Model[i].SelectedOption" value="@Model[i].OptionB" class="form-check-input" id="optionB-@i">
                            <label class="form-check-label" for="optionB-@i">@Model[i].OptionB</label>
                        </div>
                        <div class="form-check">
                            <input type="radio" asp-for="@Model[i].SelectedOption" value="@Model[i].OptionC" class="form-check-input" id="optionC-@i">
                            <label class="form-check-label" for="optionC-@i">@Model[i].OptionC</label>
                        </div>
                        <div class="form-check">
                            <input type="radio" asp-for="@Model[i].SelectedOption" value="@Model[i].OptionD" class="form-check-input" id="optionD-@i">
                            <label class="form-check-label" for="optionD-@i">@Model[i].OptionD</label>
                        </div>
                    </div>
                </div>
            </div>
        }
        <button type="submit" class="btn btn-primary">Submit Quiz</button>
        <a href="javascript:history.back()" class="btn btn-secondary">Exit</a> <!-- Exit Button -->
    </form>
</div>

<script>
    // Timer Logic
    let duration = @duration; // Use the duration passed from the server
    let timeRemaining = duration * 60; // Convert minutes to seconds

    function updateTimer() {
        let minutes = Math.floor(timeRemaining / 60);
        let seconds = timeRemaining % 60;

        // Format the time display
        document.getElementById('timeRemaining').innerText = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;

        if (timeRemaining <= 0) {
            clearInterval(timerInterval);
            handleTimeUp(); // Call a function to handle quiz submission when time is up
        }

        timeRemaining--;
    }

    // Function to handle quiz submission when the time is up
    function handleTimeUp() {
        const totalQuestions = @Model.Count;
        const radioButtons = document.querySelectorAll('input[type="radio"]:checked');

        if (radioButtons.length < totalQuestions) {
            alert("Time is up! The quiz is incomplete. You will be redirected to the previous page.");
            window.location.href = document.referrer; // Redirect to previous page
        } else {
            alert("Time is up! The quiz will be submitted now.");
            document.getElementById('quizForm').submit(); // Submit the form when time runs out and all questions are answered
        }
    }

    // Check if any options are selected before manually submitting the form
    function checkIfOptionsSelected() {
        const totalQuestions = @Model.Count;
        const radioButtons = document.querySelectorAll('input[type="radio"]:checked');

        if (radioButtons.length < totalQuestions) {
            // If not all questions are answered, show an alert
            alert(`You have not answered all questions. Please answer all before submitting.`);
            return false; // Prevent submission
        }
        return true; // Allow submission
    }

    // Handle manual form submission
    document.getElementById('quizForm').addEventListener('submit', function (event) {
        if (!checkIfOptionsSelected()) {
            // If not all options are selected, prevent form submission
            event.preventDefault();
        }
    });

    // Update the timer every second
    let timerInterval = setInterval(updateTimer, 1000);
</script>
